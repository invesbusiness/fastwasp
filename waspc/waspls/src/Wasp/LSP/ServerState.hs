{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TemplateHaskell #-}

module Wasp.LSP.ServerState
  ( ServerState (..),
    RegistrationTokens (..),
    TsExportCache,
    currentWaspSource,
    latestDiagnostics,
    cst,
    tsExports,
    regTokens,
    watchSourceFilesToken,
    reactorIn,
  )
where

import Control.Concurrent.STM (TChan)
import Control.Lens (makeClassy)
import qualified Data.HashMap.Strict as M
import qualified Language.LSP.Server as LSP
import qualified Language.LSP.Types as LSP
import qualified StrongPath as SP
import Wasp.Analyzer.Parser.CST (SyntaxNode)
import Wasp.LSP.Diagnostic (WaspDiagnostic)
import Wasp.LSP.Reactor (ReactorInput)
import Wasp.TypeScript (TsExport)

-- | LSP State preserved between handlers.
--
-- The server assumes the project has only wasp file. This state will not
-- work correctly if there are multiple wasp files.
--
-- Recommended to use the lenses for accessing the fields.
data ServerState = ServerState
  { -- | Source text for wasp file.
    _currentWaspSource :: String,
    -- | List of diagnostics generated by waspc after the last file change.
    _latestDiagnostics :: [WaspDiagnostic],
    -- | Concrete syntax tree representing '_currentWaspSource'.
    _cst :: Maybe [SyntaxNode],
    -- | Cache of source file export lists.
    _tsExports :: TsExportCache,
    -- | Registration tokens for dynamic capabilities.
    _regTokens :: RegistrationTokens,
    -- | Thread safe channel for sending actions to the LSP reactor thread.
    _reactorIn :: TChan ReactorInput
  }

-- | Map from paths to JS/TS files to the list of exports from that file.
type TsExportCache = M.HashMap (SP.Path' SP.Abs SP.File') [TsExport]

-- | LSP dynamic capability registration tokens.
--
-- When a dynamic capability is registered, it returns a 'LSP.RegistrationToken'
-- which can be used to later unregister the capability.
-- See https://microsoft.github.io/language-server-protocol/specifications/specification-3-16/#client_registerCapability.
--
-- We also store these even when we aren't interested in unregistering because
-- we can use it to track whether the capability was registered or not (dynamic
-- registration can fail if the client doesn't support it).
data RegistrationTokens = RegTokens
  { -- | Token for the src/ directory file watcher.
    _watchSourceFilesToken :: Maybe (LSP.RegistrationToken 'LSP.WorkspaceDidChangeWatchedFiles)
  }

makeClassy 'ServerState

makeClassy 'RegTokens
