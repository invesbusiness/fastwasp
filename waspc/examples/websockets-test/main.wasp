app websocketsTest {
  wasp: {
    version: "^0.10.6"
  },
  title: "websockets-test",
  auth: {
    userEntity: User,
    onAuthFailedRedirectTo: "/login",
    methods: {
      usernameAndPassword: {},
    },
  },
  client: {
    rootComponent: import Wrapper from "@client/Wrapper.jsx",
  },
  webSocket: {
    fn: import { webSocketFn } from "@server/websocket.js",
  },
  db: {
    system: PostgreSQL
  }
}

entity User {=psl
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  ideas   Idea[]
  agreedWithIdeas Idea[] @relation("AgreedIdeas")
psl=}

entity Idea {=psl
  id         Int     @id @default(autoincrement())
  idea String
  user       User    @relation(fields: [userId], references: [id])
  userId     Int
  agreedUsers User[] @relation("AgreedIdeas")
psl=}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/MainPage.tsx",
  authRequired: true
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/LoginPage.jsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/SignupPage.jsx"
}

query getIdeas {
  fn: import { getIdeas } from "@server/ideas.js",
  entities: [Idea]
}

action toggleAgreement {
  fn: import { toggleAgreement } from "@server/ideas.js",
  entities: [Idea, User]
}

action createIdea {
  fn: import { createIdea } from "@server/ideas.js",
  entities: [Idea]
}
